import re
import requests
from bs4 import BeautifulSoup


REQUEST_URL = "https://transport.dot.state.mn.us/PostLetting/Abstract.aspx"


def get_post_letting_abstract_html(year: int) -> str:
    # The payload below was copied from the post request after navigating to the target page manually
    payload = {
        "__EVENTTARGET": "ctl00$MainContent$drpPage",
        "__EVENTARGUMENT": "",
        "__LASTFOCUS": "",
        "__VIEWSTATE": "",
        "__VIEWSTATEGENERATOR": "CB5059B5",
        "__EVENTVALIDATION": "/wEdAEP3lT6HWe2T/qZT1jg1VZHr1/kROgTaTEDUErshDOtcHsyahhkwrDiNSR++FA7PlkqrxiY7QpuAA0OZi5lL4D3HxyQFCASK8RL+UbY3E2huli7thzHE0E+j4yeu77j/cuL1n0g50y16EsAZSTp7rZXgKcVvnREc1KtWrK7ZJPrFMIbwhkDVqGWTjtz0WCQfM1sQvn1btmpgTxTZ49/qiW9oB5W0Es4OZq4Mog1Cdbtzm1XTNjiNSeGvI6qv5qkeDyElG7os7J/5R5IxDD8SF9lFSWOZ3h9KgfV4FtnQKMqcTuY7P7+U+/4RbCH2mPwXlldrGAo5Y6ZurhIKerVfoJS4PoC6WJiOlXiY1JUvB3SfYrIAlTq9hPOIvvrXH8dOZzmP9AeEN29PLdmg7X8RcwCx2dscEWTR/YRu20PZOcRLzqkburaYqOwREsOwJimqrE3W90fzKbc8Yy7aGYejx/+11yBGDJMU4xydlwo68+wctUoLjbrTQsuN54E+e4oAO6MsijzAv1NMd39MddCImrrT4Jpc9TJbT00f71L0w6HijnjS2R2COqKzQzW0s5U7KbwNodnyARXFPMmvdfWng4TcF7/2QPaIIJVO4a8ZxbmMb8UpO+RXn6gpzKeVTlZDRCIhRYKQIvLsmRfIf/i0c9FlL5udmpcglh67HnBhprGtD96mW9t/bzTpwPlioqeF7ljvXL1Xk4ZbzswCZDjlMdUWtfRbfAB1dHv0+CZCyfOtBdiLDHk12dywOX17ofEuLUSh3aPjqBjgGlr8sv1gplNAPCd2hYD+TwFECtNCI9UgFQFs5Vjaoe/+QR+3kIu4VrB24gQ2/wHSvCFsDwT12Vvn8A7yyqWrMhaIAK4tk2FafxDV788bJz+O3EwT274rbJr7NTeTpjFkJQyLrlGDQfXG2TINHyYX8bK0B+ys//4Kqv+mb6GLwl9LxK9QUGzVm+kpbGJsd25kvRHxlm4vW5i7N4nZSndBEmSI+IQ/jHkKh4zW9ICRMhHa6/lGd9XS1i5zhvwObWjkzCi8ajse/I+aY7mdQH02SOGdaMD13i8jnTWwOOL0aZBP+P3G4CPkNtRun4egZG2D+1v4sv8J6q+i3HWMLyu9HsT37j7GsYedCYG7XtnAPoBU7Ph9dbk4T+fG0L/Fmv5bwniDphcKb4QaiYuj3Ru/zh0XTdVBotnaPzvnKv858NI2zf51LeJ+myK91w6SXDnHPyXvG6KB49B7C3MiUYDBZ4qEJ81kl0OcmCKIQHIW5qsqii+8GDOMMrQSQmfmgT2OqDO2fzPbenzp3rvvbNUZgJJeaVheZfkNN/d5m33tB2LYGSmdVp/rxcpnSmCYf1DOOdvP1OY/m5Hzf2zLdj1jSVOeJH0hFKnfT4CWlL2u4QQIq++b9To9fHuSk1CgPbNJ1+KDyoZyMS55vzaHt7I77ppbJHLG2yKOX6ZOjrFZNbuO1LG8gr7K0HA=",
        "ctl00$MainContent$rdAbstractSearch": "0",
        "ctl00$MainContent$drpLettingYear": str(year),
        "ctl00$MainContent$drpLettingMonth": "0",
        "ctl00$MainContent$drpPage": "20000",
    }

    r = requests.post(url=REQUEST_URL, data=payload)
    return r.text


def get_ids_from_html(html: str) -> list[str]:
    soup = BeautifulSoup(html, "html.parser")

    # Get a list of all anchor tags for the Abstract (CSV)
    # Example tag: <a href="abstractCSV.aspx?ContractId=210006" target="_blank">
    regex = re.compile("ContractId")
    anchors = soup.find_all(href=regex)

    # The last 6 digits of the href is the contract id
    return [anchor.get("href")[-6:] for anchor in anchors]


def get_contract_ids(year: int) -> list[str]:
    html = get_post_letting_abstract_html(year)
    return get_ids_from_html(html)
